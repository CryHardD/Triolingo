@page "/homelogin"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.WebUtilities
@using System.Text
@using System.Text.Encodings.Web
@using Triolingo.Components.Account
@using Triolingo.Components.Layout
@layout CustomLayout
<PageTitle>Home Login</PageTitle>
@using Microsoft.AspNetCore.Identity
@using Triolingo.Data
@inject NavigationManager NavigationManager
@inject UserManager<TriolingoUser> UserManager
@inject RoleManager<IdentityRole> RoleManager
@inject SignInManager<TriolingoUser> SignInManager
@inject IdentityRedirectManager RedirectManager
@inject IEmailSender<TriolingoUser> EmailSender
@inject ILogger<HomeLogin> Logger

<h1 style="color: white; text-align: center;">Want to learn a language?</h1>
<p style="color: white; text-align: center;">Welcome to Triolingo</p>

<div class="box-container">
    <div class="box">Language 1</div>
    <div class="box">Language 2</div>
</div>

<div class="wrapper"> 
    <span class="icon-close"><ion-icon name="close-outline"></ion-icon></span>
    <div class="form-box login">
        <h2>Login</h2>
        <EditForm Model="Input" OnValidSubmit="UserLogin">
            <div class="input-box">
                <span class="icon"><ion-icon name="mail-outline"></ion-icon></span>
                <InputText @bind-Value="Input.Email" required />
                <label>Email</label>
            </div>
            <div class="input-box">
                <span class="icon"><ion-icon name="lock-closed-outline"></ion-icon></span>
                <InputText @bind-Value="Input.Password" type="password" required />
                <label>Password</label>
            </div>
            <div class="remember-forgot">
                <label><InputCheckbox @bind-Value="Input.RememberMe" /> Remember me</label>
                <a href="#" style="color: white;">Forget Password</a>
            </div>
            <button type="submit" class="btn">Login</button>
            <div class="login-register">
                <p>Don't have an account? <a href="#" class="register-link" style="color: white;">Register here</a></p>
            </div>
        </EditForm>
    </div>

    <div class="form-box register">
        <h2>Registration</h2>
        <EditForm Model="Input" OnValidSubmit="RegisterUser">
            <div class="input-box">
                <span class="icon"><ion-icon name="person-outline"></ion-icon></span>
                <InputText @bind-Value="Input.FirstName" required />
                <label>UserName</label>
            </div>
            <div class="input-box">
                <span class="icon"><ion-icon name="mail-outline"></ion-icon></span>
                <InputText @bind-Value="Input.Email" type="email" required />
                <label>Email</label>
            </div>
            <div class="input-box">
                <span class="icon"><ion-icon name="lock-closed-outline"></ion-icon></span>
                <InputText @bind-Value="Input.Password" type="password" required />
                <label>Password</label>
            </div>
            <div class="input-box">
                <span class="icon"><ion-icon name="lock-closed-outline"></ion-icon></span>
                <InputText @bind-Value="Input.ConfirmPassword" type="password" required />
                <label>Confirm Password</label>
            </div>
            <button type="submit" class="btn">Register</button>
        </EditForm>
    </div>
</div>

<script type="module" src="https://unpkg.com/ionicons@7.1.0/dist/ionicons/ionicons.esm.js"></script>
<script nomodule src="https://unpkg.com/ionicons@7.1.0/dist/ionicons/ionicons.js"></script>
<script>
    const wrapper = document.querySelector('.wrapper');
    const loginLink = document.querySelector('.login-link');
    const registerLink = document.querySelector('.register-link');
    const btnPopup = document.querySelector('.btnLogin-popup');
    const iconClose = document.querySelector('.icon-close');

    // Show register form
    registerLink.addEventListener('click', (event) => {
    event.preventDefault(); // Prevent default link behavior
    wrapper.classList.add('active'); // Show register form
    });

    // Show login form
    loginLink.addEventListener('click', (event) => {
    event.preventDefault(); // Prevent default link behavior
    wrapper.classList.remove('active'); // Show login form
    });

    // Show popup
    btnPopup.addEventListener('click', (event) => {
    event.preventDefault(); // Prevent default link behavior
    wrapper.classList.add('active-popup');
    });

    // Close popup
    iconClose.addEventListener('click', (event) => {
    event.preventDefault(); // Prevent default link behavior
    wrapper.classList.remove('active-popup');
    });

</script>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private async Task RegisterUser()
    {
        var user = new TriolingoUser
            {
                UserName = Input.Email,
                Email = Input.Email,
                FirstName = Input.FirstName
            };

        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        if (!await RoleManager.RoleExistsAsync("User"))
        {
            await RoleManager.CreateAsync(new IdentityRole("User"));
        }

        await UserManager.AddToRoleAsync(user, "User");
        await UserManager.AddClaimAsync(user, new System.Security.Claims.Claim("userId", user.Id));

        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters("Account/ConfirmEmail", new Dictionary<string, object?> { ["userId"] = user.Id, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));


        await SignInManager.SignInAsync(user, isPersistent: false);
        NavigationManager.NavigateTo(ReturnUrl ?? "/");
    }

    private async Task UserLogin()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);

        if (result.Succeeded)
        {
            NavigationManager.NavigateTo(ReturnUrl ?? "/");
        }
        else
        {
            identityErrors = new List<IdentityError> { new IdentityError { Description = "Invalid login attempt." } };
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        public string FirstName { get; set; } = "";

        [Required]
        [StringLength(100, MinimumLength = 6)]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Compare("Password")]
        public string ConfirmPassword { get; set; } = "";

        public bool RememberMe { get; set; }
    }
}
